>>> import importlib
>>> base_geometry_module = importlib.import_module('7-base_geometry')
>>> BaseGeometry = base_geometry_module.BaseGeometry

# Test valid integer values
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

# Test invalid value: string instead of integer
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test invalid value: 0, which is not greater than 0
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test invalid value: negative number
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test invalid value: tuple instead of integer
>>> try:
...     bg.integer_validator("age", (4,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Test invalid value: list instead of integer
>>> try:
...     bg.integer_validator("age", [3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Test invalid value: boolean instead of integer
>>> try:
...     bg.integer_validator("age", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Test invalid value: set instead of integer
>>> try:
...     bg.integer_validator("age", {3, 4})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer

# Test invalid value: None instead of integer
>>> try:
...     bg.integer_validator("age", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] age must be an integer
